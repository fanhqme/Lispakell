; for historical pleasure
(def S (\x y a ((x a) (y a))))
(def K (\x y x))

(def id (\x x))
(def recur (\f ((\x (f (x x))) (\x (f (x x))))))
(def print id)

; the Bool protocol:   (b  true_value  false_value)
(def True (\x y x))
(def False (\x y y))
(def if id)
(def not (\x False True))
(def and (\x y (x y False)))
(def or (\x y (x True y)))

; the Pair protocol:   (p (\first second pair_value))
(def pair (\x y f (f x y)))
(def fst True)
(def snd False)

; the List protocol:   (l null_value (\head tail list_value))
(def cons (\x xs f g (g x xs)))
(def empty fst)
(def foldl (\f x0 (\recur (\g (\l
	(l x0 (\x xs
		(f x (g xs))
	))
)))))

; the Maybe protocol:  (m nothing_value (\v just_value))
(def nothing fst)
(def just (\v (\f g (g v))))

; functional utils
(def apply id)
(def feed (\x y (y x)))

; numeric utils
(def neg (- 0))

; filename
(def fileName (recur (\f (\name
	(name
		consFileName
		(\h r ((f r) h))
	)
))))
