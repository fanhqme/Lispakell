(import* str)
(import* io)
(def readMat (recur (\g (\h (do
	( ((<= h 0) (return empty)) )
	(line readLine)
	(let row (map atof (splitStr ' ' line)))
	(remain (g (- h 1)))
	(return (cons row remain))
)))))
(def writeMat (recur (\g (\l (do
	(row remain (l (return 0)))
	(retval (putStrLn (join " " (map ftoa row))))
	( ((/= retval 0) (return retval)))
	(g remain return)
)))))
(def matMul (\a b (let
	(mulVec (. (foldr1 (zipWith +) id 0) (zipWith (\l a (map (* a) l)) b)))
	(map mulVec a)
)))
(run
	(line readLine)
	(n k m (^list (map atoi (splitStr ' ' line))))
	(m1 (readMat n))
	(m2 (readMat k))
	(let m3 (matMul m1 m2))
	(_ (writeMat m3))
	;(_ (putStrLn (join " " (map itoa (list n k m)))))
	;(_ (writeMat m1))
	;(_ (writeMat m2))
	(exit 0)
)
