(def isDigit (\x (and (>= x '0') (<= x '9'))))
(def isSpace (\x (or (= x ' ') (or (= x '\t') (= x '\n')))))
(def intFromDigit (\x (- x '0')))
(def digitFromInt (+ '0'))
(def atoi (\s (let
	(atoiP (foldl (\t a (+ (* t 10) (intFromDigit a))) 0 ))
	(s 0 (\h r (
		(= h '-') (neg (atoiP r))
		(atoiP s)
	))))
))
(def itoa (\s (let
	(itoaP (recur (\f (\tail x
		((<= x 9) (cons (digitFromInt x) tail)
			(f (cons (digitFromInt (% x 10)) tail) (/ x 10))
		))) ""))
	((>= s 0) (itoaP s)
		(cons '-' (itoaP (neg s)))
	))
))
(def splitStr (\d s (let
	(appendHead (\a l (l (list (list a)) (\h r (cons (cons a h) r)))))
	(foldr (\a r
		((= a d) (cons empty r)
			(appendHead a r)
		)
	) empty s)
)))
(def rstrip (foldr (\a r (or (not (isSpace a)) (not (null r)) (cons a r) r)) empty))
(def cmpStr (cmpList <))
(def lstrip (dropWhile isSpace))
