(def isDigit (\x (and (>= x '0') (<= x '9'))))
(def isSpace (\x (or (= x ' ') (or (= x '\t') (or (= x '\n') (= x '\r'))))))
(def intFromDigit (\x (- x '0')))
(def digitFromInt (+ '0'))

(let signedParse (\f s
	(s (f s) (\h r (run
		( ((= h '-') (neg (f r))))
		( ((= h '+') (f r)))
		(f s)
	)))
))
(let signedShow (\f s
	((< s 0) (cons '-' (f (neg s))) (f s))
))

(def intFromDigits (foldl (\t a (+ (* t 10) (intFromDigit a))) 0))
(def atoi (signedParse (. intFromDigits (takeWhile isDigit))))
(def uitoa (recur (\f (\tail x
		((<= x 9) (cons (digitFromInt x) tail)
			(f (cons (digitFromInt (% x 10)) tail) (/ x 10))
		)
)) ""))
(def itoa (signedShow uitoa))
(def atof (let
	(mantissa (foldr (\a t (* 0.1 (+ (intFromDigit a) t))) 0))
	(atofP (\s ((span isDigit s) (\ipart fpart (let
		(ival (intFromDigits ipart))
		(fpart ival (\h r
			((/= h '.') ival
				(+ ival (mantissa (takeWhile isDigit r)))
			)
		))
	)))))
	(signedParse atofP)
))
(def ftoaPrecision (\prec (let
	(ftoaP (\s (let
		(ival (toInt s))
		(mval (- s ival))
		(mpart (recur (\f (\togo cur
			((<= togo 0) empty (let
				(c10 (* cur 10))
				(d (toInt c10))
				(cons (digitFromInt d) (f (- togo 1) (- c10 d)))
			))
		)) prec mval))
		(++ (uitoa ival) ((> prec 0) (cons '.' mpart) empty))
	)))
	(signedShow (. ftoaP (+ (iterateN prec (* 0.1) 0.5))))
)))
(def ftoa (ftoaPrecision 6))
(def splitStr (\d (let
	(appendHead (\a l (l (list (list a)) (\h r (cons (cons a h) r)))))
	(foldr (\a r
		((= a d) (cons empty r)
			(appendHead a r)
		)
	) empty)
)))
(def rstrip (foldr (\a r (or (not (isSpace a)) (not (null r)) (cons a r) r)) empty))
(def cmpStr (cmpList <))
(def lstrip (dropWhile isSpace))

(def concatShow (foldr . id))
(def showChar cons)
(def showString ++)
(def showEscapeChar (\outer c (run 
	( ((= c '\n') (showString "\\n")))
	( ((= c '\t') (showString "\\t")))
	( ((= c outer) (showString (list '\\' c))))
	(showChar c)
)))
(def showCharL (\c (. (showChar '\'') (. (showEscapeChar '\'' c) (showChar '\'')))))
(def showStringL (\l (. (showChar '"') (. (concatShow (map (showEscapeChar '"') l)) (showChar '"')))))
(def showInt (. showString itoa))
(def showFloatPrecision (\prec (. showString (ftoaPrecision prec))))
(def showFloat (. showString ftoa))
(def showPair (\s1 s2 (feed (\a b (. (showChar '(') (. (s1 a) (. (showChar ',') (. (s2 b) (showChar ')')))))))))
(def showList (\s1 (\l (. (showChar '[') (. (concatShow (intersperse (showChar ',') (map s1 l))) (showChar ']'))))))
